quarkus.http.port=8078
quarkus.http.test-port=8084

quarkus.grpc.server.port=9000
quarkus.grpc.server.test-port=9000


%prod.quarkus.grpc.server.enable-reflection-service=true
quarkus.grpc.server.enable-reflection-service=true



# configure your datasource
%prod.quarkus.datasource.db-kind=postgresql
# Inserted from docker-compose
%prod.quarkus.datasource.username=${QUARKUS_DATASOURCE_USERNAME}
%prod.quarkus.datasource.password=${QUARKUS_DATASOURCE_PASSWORD}
%prod.quarkus.datasource.reactive.url=${QUARKUS_DATASOURCE_REACTIVE_URL}


quarkus.hibernate-orm.database.generation = drop-and-create

# Baggage service url
quarkus.rest-client.baggage-resource.url=http://localhost:8077
%prod.quarkus.rest-client.baggage-resource.url=${QUARKUS_BAGGAGE_RESOURCE_URL}
quarkus.rest-client.baggage-resource.scope=jakarta.enterprise.context.Singleton
quarkus.rest-client.baggage-resource.verify-host=false

# include swagger in prod
quarkus.swagger-ui.always-include=true

# Opentelemetry
%prod.quarkus.otel.exporter.otlp.traces.endpoint=${QUARKUS_OTEL_ENDPOINT}

# baggage service username and password
# TODO add username and password to the baggage service
# note: in the real world, you should use a secret manager like vault but for teaching purposes it's fine
baggage-service.rest.username=passenger-service
baggage-service.rest.password=secret